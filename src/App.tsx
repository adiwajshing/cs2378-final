import React, { useEffect, useState } from 'react';
import Slider, { Handle, SliderTooltip } from 'rc-slider'
import DataGenerator, { DEFAULT_SELECTED_VARIABLES } from './DataGenerator/index';
import Graph from './Graph';
import VARIABLES from './variables.json'

import './App.css';
import 'rc-slider/assets/index.css';

type InputViewProps<T extends keyof typeof VARIABLES> = {
  title: T
  content: typeof VARIABLES[T]
  value: typeof VARIABLES[T]['default']
  setValue: (v: typeof VARIABLES[T]['default']) => void
}
const handle = (props: any) => {
  const { value, dragging, index, ...restProps } = props;
  return (
    <SliderTooltip
      prefixCls="rc-slider-tooltip"
      overlay={`${value}`}
      visible={dragging}
      placement="top"
      key={index}
    >
      <Handle value={value} {...restProps} />
    </SliderTooltip>
  );
}
function InputView<T extends keyof typeof VARIABLES>({
  title,
  content,
  value,
  setValue
}: InputViewProps<T>) {
  let type = 'plain'
  if(typeof content.max === 'number' && typeof content.min === 'number') {
    type = 'range'
  }
  return (
    <div className='title-input'>
      <div className='title color-secondary'>
        <div className='flex-def'>
          {title}
          <div className='subtitle'>
            {value}
          </div>
        </div>
        <div className='description'>
          {//@ts-ignore
          content.description
          }
        </div>
      </div>
      <div style={{ height: '2rem' }}/>
      {
        type === 'range' ? (
          <Slider 
            value={value}
            onChange={v => setValue(Math.round(v))}
            min={content.min} 
            max={content.max} 
            step={(content.max-content.min)/20} 
            handle={handle}/>
        ) : (
          <div />
        )
      }
    </div>
  )
}

export default () => {

  const [data, setData] = useState<{x: string, y: number}[]>([])
  const [variableSet, setVariableSet] = useState(DEFAULT_SELECTED_VARIABLES)
  const [mostRevenueTerm, setMostRevenueTerm] = useState(0)

  useEffect(() => {
    const data = DataGenerator(variableSet)
    setData(data)
    let max = 0
    let point = 0
    for(const { x, y } of data) {
      if(y > max) {
        point = +x
        max = y
      }
    }
    setMostRevenueTerm(point)
  }, [variableSet])

  return (
    <div className="App">
      <div className='flex-def'>
        <div>
          <h1>
            Ashoka University -- CS 2378 Final
          </h1>
          <h4 className="color-secondary">
            Adhiraj Singh &#38; Garvit Kharbanda
          </h4>
          <div>
            <a href='https://github.com/adiwajshing/cs2378-final' target='_blank'>GitHub</a> |
            <a href='https://github.com/adiwajshing/cs2378-final/blob/master/variables.pdf' target='_blank'>Explanation</a>
          </div>
        </div>

        <div className='text-right color-secondary'>
          Simulating the gross revenue generated by a collective of entities,
          given the copyright term were X years.
        </div>
      </div>

      <div className='flex-def'>
        <div>
        Optimal Copyright Term: <b>{mostRevenueTerm} years</b>
        {
          data.length > 0 && (
            <Graph id='main' years={variableSet.simulationYears.toString()} data={data} color='black'/>
          )
        }
        </div>

        <div className='spaced-out'>
          {(Object.keys(VARIABLES) as any as (keyof typeof VARIABLES)[]).map(key => (
            <InputView 
              value={variableSet[key]}
              setValue={value => setVariableSet({ ...variableSet, [key]: value })}
              //@ts-ignore
              title={VARIABLES[key].name || key}
              content={VARIABLES[key]}/>
          ))}
          
        </div>
      </div>
    </div>
  )
}