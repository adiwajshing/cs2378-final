{"version":3,"sources":["DataGenerator/calculateRevenue.ts","DataGenerator/index.ts","Graph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getMaxProfitabilityYear","maxYears","value","Math","random","floor","makeNewWork","year","derivativeValue","derivativeFactor","createdYear","profitabilityFactor","maxProfitabilityYear","state","revenue","piracyLoss","revenueGenerated","copyrightTerm","piracyFactor","z","exp","getWorkValue","work","variables","entities","Array","contentProducingEntities","map","_","i","works","maximumCopyrightedWorks","x","inequality","initialWealthInequality","scale","maxWorksPerEntity","ceil","publicDomainWorks","publicWorkLifetimeValue","entity","maxWorks","length","max","push","maxYearsTillMaxProfitability","ideasFromPublicDomain","min","rWork","undefined","workValue","reduce","sum","idx","rev","years","multiplier","b","c","revenueOfWork","piracyMultiplier","splice","simulationYears","e","DEFAULT_SELECTED_VARIABLES","Object","keys","dict","key","default","RANGE","props","className","data","colors","size","scheme","margin","top","right","bottom","left","xScale","type","base","yScale","axisTop","axisBottom","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","format","curve","lineWidth","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","handle","dragging","index","restProps","prefixCls","overlay","visible","placement","InputView","title","content","setValue","description","style","height","onChange","v","round","step","useState","setData","variableSet","setVariableSet","mostRevenueTerm","setMostRevenueTerm","useEffect","points","toString","y","calculateRevenue","DataGenerator","point","href","target","id","color","VARIABLES","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa188411.chunk.js","sourcesContent":["import { SelectedVariables } from \"./types\"\n\nconst AVG_REVENUE = 10\nconst WORK_GEN_FACTOR = 0.01\n\ntype Work = {\n\tcreatedYear: number\n\tprofitabilityFactor: number\n\tmaxProfitabilityYear: number\n\tstate: 'copyrighted' | 'public-domain'\n\trevenue: number\n\tderivativeValue: number\n}\ntype Entity = {\n\tworks: Work[]\n\tmaximumCopyrightedWorks: number\n\trevenue: number\n}\nconst k = 2;\nfunction sigmoid(z: number) {\n  return 1 / (1 + Math.exp(-z/k));\n}\nconst getMaxProfitabilityYear = (maxYears: number) => {\n\tlet value: number\n\tif(Math.random() < 0.5) {\n\t\tvalue = Math.random() * 3\n\t} else {\n\t\tvalue = Math.random()*maxYears\n\t}\n\treturn Math.floor(value)\n}\nconst makeNewWork = (year: number, derivativeValue: number, maxYears: number, derivativeFactor: number) => {\n\treturn {\n\t\tcreatedYear: year,\n\t\tprofitabilityFactor: (Math.random() + 0.5 + derivativeValue*(derivativeFactor/1000))/2,\n\t\tmaxProfitabilityYear: getMaxProfitabilityYear(maxYears),\n\t\tstate: 'copyrighted',\n\t\trevenue: 0,\n\t\tderivativeValue\n\t} as Work\n}\n// modelled by a gaussian bell curve\nconst revenueOfWork = (years: number, multiplier: number, maxProfitabilityYear: number) => {\n\tconst b = maxProfitabilityYear\n\tconst c = multiplier\n\treturn Math.floor(multiplier * Math.exp(\n\t\t- (years - b)*(years - b)/(2*c*c)\n\t))\n}\n// use an inverse function to model wealth inequality\nconst maxCopyrightedWorks = (x: number, inequality: number, scale: number) => (\n\tMath.ceil(\n\t\tMath.exp(-(x/scale)*(inequality/100) + 1)*(scale)\n\t)\n)\nconst piracyLoss = (revenueGenerated: number, copyrightTerm: number, piracyFactor: number) => {\n\treturn sigmoid(revenueGenerated*copyrightTerm*(piracyFactor/1000))\n}\nconst getWorkValue = (work: Work) => (\n\twork.revenue*(work.createdYear+work.maxProfitabilityYear)/(work.derivativeValue+1)\n)\n\nexport default (copyrightTerm: number, variables: SelectedVariables) => {\n\t// initialize entities\n\tconst entities: Entity[] = [...new Array(variables.contentProducingEntities)].map((_, i) => ({\n\t\tworks: [],\n\t\tmaximumCopyrightedWorks: maxCopyrightedWorks(i, variables.initialWealthInequality, variables.maxWorksPerEntity),\n\t\trevenue: 0\n\t}))\n\t// list of all public domain works\n\tconst publicDomainWorks: Work[] = []\n\t// lifetime \"value\" of all the public domain works\n\tlet publicWorkLifetimeValue = 0\n\t// run the simulation\n\tfor(let i = 0; i < variables.simulationYears;i++) {\n\t\t// loop through entities\n\t\tfor(const entity of entities) {\n\t\t\tconst maxWorks = entity.maximumCopyrightedWorks + Math.floor(entity.revenue*0.01)\n\t\t\tif(entity.works.length < maxWorks) {\n\t\t\t\tif(Math.random() < WORK_GEN_FACTOR*Math.max(entity.revenue, 10)) {\n\t\t\t\t\tentity.works.push(makeNewWork(i, 0, variables.maxYearsTillMaxProfitability, variables.derivativeFactor))\n\t\t\t\t} else if(Math.random() < (1/variables.ideasFromPublicDomain)*publicDomainWorks.length) {\n\t\t\t\t\tconst value = publicWorkLifetimeValue*Math.random()\n\t\t\t\t\tlet min = 0\n\t\t\t\t\tlet rWork = undefined as any as Work\n\t\t\t\t\tfor(const work of publicDomainWorks) {\n\t\t\t\t\t\tconst workValue = getWorkValue(work)\n\t\t\t\t\t\tif(value >= min && value < min+workValue) {\n\t\t\t\t\t\t\trWork = work\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmin += workValue\n\t\t\t\t\t}\n\t\t\t\t\tif(!rWork) rWork = publicDomainWorks[publicDomainWorks.length-1]\n\t\t\t\t\tentity.works.push(\n\t\t\t\t\t\tmakeNewWork(\n\t\t\t\t\t\t\ti, \n\t\t\t\t\t\t\trWork.derivativeValue+1, // increase derivative value\n\t\t\t\t\t\t\trWork.maxProfitabilityYear*0.5,\n\t\t\t\t\t\t\tvariables.derivativeFactor\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tentity.revenue += entity.works.reduce((sum, work, idx) => {\n\t\t\t\tif(work.state === 'copyrighted') {\n\t\t\t\t\tlet rev = revenueOfWork(\n\t\t\t\t\t\ti-work.createdYear, \n\t\t\t\t\t\tAVG_REVENUE*work.profitabilityFactor,\n\t\t\t\t\t\twork.maxProfitabilityYear\n\t\t\t\t\t)\n\t\t\t\t\trev *= (1 - piracyLoss(work.revenue, copyrightTerm, variables.piracyMultiplier))\n\t\t\t\t\twork.revenue += rev\n\t\t\t\t\tsum += rev\n\t\t\t\t\tif(i-work.createdYear > copyrightTerm) {\n\t\t\t\t\t\twork.state = 'public-domain'\n\t\t\t\t\t\tpublicDomainWorks.push(work)\n\t\t\t\t\t\tpublicWorkLifetimeValue += getWorkValue(work)\n\t\t\t\t\t\tentity.works.splice(idx, 1)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn sum\n\t\t\t}, 0)\n\t\t}\n\t}\n\treturn entities.reduce((sum, e) => sum + e.revenue, 0)\n}","import calculateRevenue from \"./calculateRevenue\"\nimport { SelectedVariables } from \"./types\"\nimport variables from '../variables.json'\n//@ts-ignore\nexport const DEFAULT_SELECTED_VARIABLES = Object.keys(variables).reduce((dict, key) => (\n\t//@ts-ignore\n\t{ ...dict, [key]: variables[key].default }\n), { }) as SelectedVariables\n\nconst RANGE = [1,200] as const\nconst STEP_FACTOR = 6 // increase in step depends on this factor\n\nexport default (variables: SelectedVariables) => {\n\tconst points: { x: string, y: number }[] = []\n\n\tfor(let i = RANGE[0];i < RANGE[1];) {\n\t\tpoints.push({ \n\t\t\tx: i.toString(),\n\t\t\ty: calculateRevenue(i, variables)\n\t\t})\n\t\ti += Math.ceil(i/STEP_FACTOR) // increase step size as we increase X\n\t}\n\n\treturn points\n}","import React from 'react'\nimport { ResponsiveLine } from '@nivo/line'\nimport './Graph.css'\n\ntype LineGraphProps = {\n    id: string\n    years: string\n    data: { x: string; y: number }[]\n    color: string\n}\nexport default (props: LineGraphProps) => {\n    return (\n        <div className=\"line-graph-container\">\n            <ResponsiveLine\n                data={[props]}\n                colors={{ size: 1, scheme: 'set1' }}\n                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                xScale={{ type: 'log', base: 2 }}\n                //xFormat=\"time:%Y/%m/%d\"\n                yScale={{ type: 'linear' }}\n                // yFormat=\" >-.2f\"\n                axisTop={null}\n                axisBottom={{\n                    tickSize: 1,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Max copyright term (years)',\n                    legendOffset: 36,\n                    legendPosition: 'middle',\n                }}\n                axisLeft={{\n                    format: (e) => Math.floor(e) === e && e,\n                    tickSize: 1,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: `Gross Revenue (over ${props.years} years)`,\n                    legendOffset: -50,\n                    legendPosition: 'middle',\n                }}\n                curve=\"linear\"\n                lineWidth={3}\n                pointLabelYOffset={-12}\n                useMesh={true}\n                legends={[\n                    {\n                        anchor: 'bottom-right',\n                        direction: 'column',\n                        justify: false,\n                        translateX: 100,\n                        translateY: 0,\n                        itemsSpacing: 0,\n                        itemDirection: 'left-to-right',\n                        itemWidth: 80,\n                        itemHeight: 20,\n                        itemOpacity: 0.75,\n                        symbolSize: 12,\n                        symbolShape: 'circle',\n                        symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                        effects: [ ],\n                    },\n                ]}\n            />\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport Slider, { Handle, SliderTooltip } from 'rc-slider'\nimport DataGenerator, { DEFAULT_SELECTED_VARIABLES } from './DataGenerator/index';\nimport Graph from './Graph';\nimport VARIABLES from './variables.json'\n\nimport './App.css';\nimport 'rc-slider/assets/index.css';\n\ntype InputViewProps<T extends keyof typeof VARIABLES> = {\n  title: T\n  content: typeof VARIABLES[T]\n  value: typeof VARIABLES[T]['default']\n  setValue: (v: typeof VARIABLES[T]['default']) => void\n}\nconst handle = (props: any) => {\n  const { value, dragging, index, ...restProps } = props;\n  return (\n    <SliderTooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={`${value}`}\n      visible={dragging}\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </SliderTooltip>\n  );\n}\nfunction InputView<T extends keyof typeof VARIABLES>({\n  title,\n  content,\n  value,\n  setValue\n}: InputViewProps<T>) {\n  let type = 'plain'\n  if(typeof content.max === 'number' && typeof content.min === 'number') {\n    type = 'range'\n  }\n  return (\n    <div className='title-input'>\n      <div className='title color-secondary'>\n        <div className='flex-def'>\n          {title}\n          <div className='subtitle'>\n            {value}\n          </div>\n        </div>\n        <div className='description'>\n          {//@ts-ignore\n          content.description\n          }\n        </div>\n      </div>\n      <div style={{ height: '2rem' }}/>\n      {\n        type === 'range' ? (\n          <Slider \n            value={value}\n            onChange={v => setValue(Math.round(v))}\n            min={content.min} \n            max={content.max} \n            step={(content.max-content.min)/20} \n            handle={handle}/>\n        ) : (\n          <div />\n        )\n      }\n    </div>\n  )\n}\n\nexport default () => {\n\n  const [data, setData] = useState<{x: string, y: number}[]>([])\n  const [variableSet, setVariableSet] = useState(DEFAULT_SELECTED_VARIABLES)\n  const [mostRevenueTerm, setMostRevenueTerm] = useState(0)\n\n  useEffect(() => {\n    const data = DataGenerator(variableSet)\n    setData(data)\n    let max = 0\n    let point = 0\n    for(const { x, y } of data) {\n      if(y > max) {\n        point = +x\n        max = y\n      }\n    }\n    setMostRevenueTerm(point)\n  }, [variableSet])\n\n  return (\n    <div className=\"App\">\n      <div className='flex-def'>\n        <div>\n          <h1>\n            Ashoka University -- CS 2378 Final\n          </h1>\n          <h4 className=\"color-secondary\">\n            Adhiraj Singh &#38; Garvit Kharbanda\n          </h4>\n          <div>\n          <a href='https://github.com/adiwajshing/cs2378-final' target='_blank'>GitHub</a>\n          </div>\n        </div>\n\n        <div className='text-right color-secondary'>\n          Simulating the gross revenue generated by a collective of entities,\n          given the copyright term were X years.\n        </div>\n      </div>\n\n      <div className='flex-def'>\n        <div>\n        Optimal Copyright Term: <b>{mostRevenueTerm} years</b>\n        {\n          data.length > 0 && (\n            <Graph id='main' years={variableSet.simulationYears.toString()} data={data} color='black'/>\n          )\n        }\n        </div>\n\n        <div className='spaced-out'>\n          {(Object.keys(VARIABLES) as any as (keyof typeof VARIABLES)[]).map(key => (\n            <InputView \n              value={variableSet[key]}\n              setValue={value => setVariableSet({ ...variableSet, [key]: value })}\n              //@ts-ignore\n              title={VARIABLES[key].name || key}\n              content={VARIABLES[key]}/>\n          ))}\n          \n        </div>\n      </div>\n    </div>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}